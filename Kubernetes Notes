Kubernetes used to deploy and maintain microservices. 
Kubertenes is a node cluster.
Controller: which has cluster stage and the desired stage.
Scheduler:
Manager:
Microservies: small, autonomus software with work together. 
Pods: wrap around containers, and Kubernetes cluster will be running these pods.
Steps of Deployment on Kubernetes: create the microservices, pack it into container, pack those containers inside the pods, and then deploy it to the API server. 
#practice commands to deploy Kubernetes:
kubectl apply -f yamlfile.yml
#in the YAML file, there will be dependencies and requirement to run the pod, this included the containers created inside the file.
kubectl apply -f <yaml file name> << deployment our pod to the kubernetes cluster 
#underand of the YAML file is nesscessary because our pod is built upon it.
apiVerison, kind, metadata, spec
Pod has IP address, single range of TCP and UDP ports, and a single routing table. 
container: carry applications, app that are ready to deply, pods wrapper around container: sharing with networkds, ReplicaSet: scaling and self healing, deployment used to rollout and rollback.
Pods let you co-locate, share volume, share memory, simplify network. 
#YAML file sety up:
#YAML file for service set up the Pod to run on the cluster:|
apiVersion: v1 
kind: Service 
metadata:
  name: my-service 
sec:
  selector:
  app:myApp
   ports:
      protocol: TCP 
      port: 80 
      targetPort: 9376
 apiVersion: v1 
 kind: Service 
 metadata:
  name: my-service 
 sec:
    selector:
    app: myApp
     ports:
        protocal: TCP
        port: 80
        targetPort: 9376
clusterIP: the IP that assign to your cluster. 
What is microservices? Microservices are small, auto services that work together. 
Review on Docker: 
docker pull image from Docker Hub
create a directory, cd to that directory. 
create a Dockerfile with all dependencdies, when we build image, this Dockerfile will be compiled.
Sample of Dockerfile for Docker: 
FROM <iamge pull from Docker Hub>

WORDIR <run all dependencies from this location> <... into this location>

RUN <run all of these apps>

docker build image -tag <image name> .
docker container run -it or -d <image name> -p 8080:8080
docker container ls -a 
docker image ls 
docker ps 






 
      
     
      
  
 
