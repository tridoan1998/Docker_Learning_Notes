Kubernetes used to deploy and maintain microservices. 
Kubertenes is a node cluster.
Controller: which has cluster stage and the desired stage.
Scheduler:
Manager:
Microservies: small, autonomus software with work together. 
Pods: wrap around containers, and Kubernetes cluster will be running these pods.
Steps of Deployment on Kubernetes: create the microservices, pack it into container, pack those containers inside the pods, and then deploy it to the API server. 
#practice commands to deploy Kubernetes:
kubectl apply -f yamlfile.yml
#in the YAML file, there will be dependencies and requirement to run the pod, this included the containers created inside the file.
kubectl apply -f <yaml file name> << deployment our pod to the kubernetes cluster 
#underand of the YAML file is nesscessary because our pod is built upon it.
apiVerison, kind, metadata, spec
Pod has IP address, single range of TCP and UDP ports, and a single routing table. 
container: carry applications, app that are ready to deply, pods wrapper around container: sharing with networkds, ReplicaSet: scaling and self healing, deployment used to rollout and rollback.
Pods let you co-locate, share volume, share memory, simplify network. 
#YAML file sety up:
#YAML file for service set up the Pod to run on the cluster:|
apiVersion: v1 
kind: Service 
metadata:
  name: my-service 
sec:
  selector:
  app:myApp
   ports:
      protocol: TCP 
      port: 80 
      targetPort: 9376
 apiVersion: v1 
 kind: Service 
 metadata:
  name: my-service 
 sec:
    selector:
    app: myApp
     ports:
        protocal: TCP
        port: 80
        targetPort: 9376
clusterIP: the IP that assign to your cluster. 
What is microservices? Microservices are small, auto services that work together. 
Review on Docker: 
docker pull image from Docker Hub
create a directory, cd to that directory. 
create a Dockerfile with all dependencdies, when we build image, this Dockerfile will be compiled.
Sample of Dockerfile for Docker: 
FROM <iamge pull from Docker Hub>

WORDIR <run all dependencies from this location> <... into this location>

RUN <run all of these apps>

docker build image -tag <image name> .
docker container run -it or -d <image name> -p 8080:8080
docker container ls -a 
docker image ls 
docker ps 

How to deploy the app to the Kubernetes:
Step 0: create the configuration files aka the .YAML file 
Step 1: mkdir a directory to store two files, for example we using mongo to deply, we have two files named mongo.yaml and mongo-secret.yaml
Problem faced: can not run the command in CLI: kubectl apply -f mongo-secret.yaml 
error is: Error from server (InternalError): an error on the server ("") has prevented the request from succeeding
solved it already. Set the project to test, and define a Virtual Cloud for the K8b to deploy.
4 types of networking:
1. Container to Container => Solved by Pods 
2. 

https://kubernetes.io/docs/tutorials/hello-minikube/
 1483  docker build tridoan1998/myfirstapp
 1484  docker pull tridoan1998/myfirstapp
 1485  docker pull tridoan1998/myfirstapp
 1486  docker build .
 1487  cd ..
 1488  ls
 1489  docker container run -d -p 1010:1010 --name mycontainer tridoan1998/myfirstapp
 1490  docker ls -a
 1491  docker container ls -a
 
 Note for Udemy class for CKAD certificate:
Architecture of Kubernetes: Master node, and many worker nodes. We can have many master node, but only one can run active at a time. 
docker ps | egrep <name of the container>
docker start/stop <name of the container>
Crete a K8s cluster => choose how many nodes you want to run.
We can access our cluster using the CLI, with token and authencations, password.
When we crete the cluster, we have the address of where the cluster is, and the authirecation to it.
the command kubectl is the command tool line we used to run against the Kubernetes cluster
High level workflow:
in order to access the cluster, the CLI need two things: the DNS/IP of the cluster + authiencation 
kubectl get nodes # show how many workers node 
cd ~/.kube # get into the K8s directory files 
kubectl --kubeconfig "config" get nodes 
kubectl and minikube: kubectl help to deploy app, services on K8s and minikube is a single node running locally on the VM.
what is inside the master node? => scheduler, controller, manager, etcd, API server. 
minikue is a one node Kubernetes cluster.
kubectl is a commmand line tool for K8s cluster
API: kubectl proxy --port=8080
PODS: docker run --name <name of docker container> <image name used to create container>
kubectl run <name of docker container> --image=<name of image used>
kubectl get pods 
container inside a pod can share IP address and port space, and can communicate via localhost.
Kubernetes Objecy is the record of intent 
2 ways to configure a Kubernetes Object:
First is to use the kubectl command 
Secind is to use the YAML file.
For example:
apiversion: v1 
kind: Pod 
metadata: 
  name: mykubernetes-pod 
  spec:
      container:
      -   name: mywebserver 
          image: nginx:latest
 Difference between CMD and ENTRYPOINT. 
  2148  kubectl apply -f commands.yaml
 2149  kubectl get pods
 2150  kubectl exec -it command sh
 2151  kubectl exec -it command4 sh
 2152  docker run -d --name nginx nginx
 2153  docker ps
 2154  docker ps | head
 2155  clear
 2156  docker ps | head
 2157  docker inspect nginx
 2158  clear
 2159  docker run -d nginx2 -p 80:80nginx
 2160  docker run -d --name nginx2 -p 80:80 nginx
 2161  docker ps | head
 2162  docker images
 2163  docker images | egrep mykplabs
 
  1066  git clone https://github.com/docker/getting-started/tree/master/app
 1067  git clone https://github.com/docker/getting-started/
 1068  git clone https://github.com/docker/getting-started/tree/master/app
 1069  git clone https://github.com/docker/getting-started/tree/master/
 1070  git clone https://github.com/docker/getting-started/tree/
 1071  git clone https://github.com/docker/getting-started/app
 1072  git clone https://github.com/docker/getting-started/app/
 1073  docker push tridoan1998/getting-started:latest
 1074  docker push tridoan1998/getting-started
 1075  docker push getting-started
 1076  docker tag tridoan1998/getting-started
 1077  docker container ls | head
 1078  docker container ls -a | head
 1080  docker tag getting-started tridoan1998/getting-started
 1081  docker push tridoan1998/getting-started
  1184  kubectl get rs
 1185  kubectl get pods
 1186  kubectl get deployments
 1187  kubectl get rs
 1188  kubectl get pods
 1189  kubectl apply -f deployments.yaml
 1190  kubectl get rs
 1191  kubectl get rs
 1192  kubectl get rs
 1193  kubectl get rs
 1194  kubectl get deployments
 1195  kubectl describe deployment nginx-deployment
 1196  kubectl rollout history deployment.v1.apps/nginx-deployment
 1197  kubectl rollout history deployment.v1.app/nginx-deployment --revision 1
 1198  kubectl rollout history deployment.v1.apps/nginx-deployment --revision 1
 1199  kubectl rollout history deployment.v1.apps/nginx-deployment --revision 2
 
 Note: crate deployment, do kubectl apply -f my-deployment.yaml
  check for deployment, kubectl get deployments
  check for replicaset, kubectl get rs 
  check for pods, kubectl get pods 
  check for rollout history, kubectl rollout history deployment.v1.apps/my-deployment
  
  Learning about servives for Kubernetes!
  
  






