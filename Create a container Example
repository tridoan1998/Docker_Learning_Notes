docker image pull <repository>:<tag>    << This will pull the image 
cd pswed                << Go to the directory that store the repository we just pull from the web
ls                      << check to see for the Dockerfile 
cat Dockerfile          << check for their components before build 
docker image build -p <image ID or name> <tag>    << build our image using the Dockerfile, -p make it run in the background 
docker image ls -a    <<check to see what image are running
docker tag <existing-image> <hub-user>/<repo-name>[:<tag>]    << create a new tag for the image to get ready to push it to the Docker Hub 
docker push <hub-user>/<repo-name>:<tag>                 << push the newly created image to Docker Hub for storage and sharing
docker container run -p <image ID>:<tag> << run container with the image ID in the background 
docker stop <image ID>
docker rm <image ID>
docker container run -d --name <name> \ -p 80:8080 \ <image name>:<tag> << run the app
#next is to use docker compose to manage multople microservices aka many containers all together
#docker compose use the YAML file (docker-compose.yml) => this file is the glue that sticks all the application microservises together, it describes how Docker should build and deploy the app. 
docker-compose --version 
#docker compose should have Dockerfile used to build the image, and the docker-compose YAML file, plus the app.py for the application code, and the requirements.txt that list te Python packages required for the app.
docker-compose up &  << this will run the app.py with Flask web framework, use Dockerfile to build image, use docker-compose to glue all applications files together and use requirenment.txt to run required libraries
docker container ls << check the port for web browser 
docker-compose down << take down

docker-compose run $ << make sure we have the docker-compose.yml file ready which contains version, services, volumn => a ton of them
docker-compose down  << take down the compose 

#next we will go over how to create an image of Apache and run a container, deploy it to the web
git clone httpd .
mkdir apache_demo 
cd apache_demo
vi Dockerfile 
#cope the requirement in the Apache website to create the Dockerfile for Apache 
docker image build -t apache_demo /bin/bash .
docker container run -d apache_demo - p 8080:8080 /bin/bash
docker ps  << show all the process are running, which also show the port they are running on
docker swarm init << create swarm and set the node as manager
docker swarm join-token worker1 
docker swarm join-token worker2
docker swarm join-token manager2

docker network create my-net  << create a network bridge for single host 
docker container create --name my-nginx --network my-net --publish 8080:80 my-nginx:latest << create container 
docket network connect my-net my-nginx << connect bridge network with the container 

#practice docke commands:
docker run -it devopsdockeruh/pull_exercise .  << run the container and connect the container to the terminal, build it from the image in the current directory, using the name ID given 
#Dockerfile is basically a file that contains everything it needed to build an image for the container. The format is: FROM <image used>, RUN <install the dependency>, WKDIR <the dicrectory the image will be build on>
#each of these instruction will stack up one on top of another to build an image. This is why our image will have many layers. 
git clone https..../linux_tweet_app.com
cd ~/linux_tweet_app
cat Dockerfile:
FROM 
WOKDIR
RUN 
git clone https://github.com/ibnesayeed/linkextractor.git
cd linkextractor
git checkout demo 
git checkout step0 
tree
vi Dockerfile 
FROM pyhton:3
WOKDIR .
RUN pip install beautifulsoup4
RUN pip install requests
COPY /user/linkextractor.py .
RUN chmod a+x linkextractor.py 
#get out of the Dockerfile, exist the file, saved it!
docker image build -t linkextractor:step1 .
docker container run -it --rm linkextractor:step1 bash 

#more practices:
docker image built based upon Dockerfile, and Dockerfile is a list of instructions it gives to contruct the image.


 1071  docker build ubuntu
 1072  docker image build ubuntu
 1073  docker pull ubuntu
 1074  docker image build -t myimage2 ubuntu
 1075  docker image build -t myimage2 ubuntu:latest .
 1076  docker image build  ubuntu:latest .
 1077  clear
 1078  docker images
 1079  docker pull nginx
 1080  docker build test nginx
 1081  docker build test nginx .
 1082  docker build nginx
 1083  clear
 1084  docker pull ubuntu:latest
 1085  clear
 1086  command history

version: '3'
services:
    mongodb:
        image: mongo
        ports:
         - 27017:27017
         enviroment:
         - MONGO_INITDB_ROOT_USERNAME=admin
         - MONGO_INITDB_ROOT_PASSWORD=password
    mongo-express:
        image: mongo-express
        ports:
         - 8080:8081
        environment:
         - ME_CONFIG_MONGODB_ADMINUSERNAME=admin 
          
